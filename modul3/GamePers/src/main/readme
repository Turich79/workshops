В этом задании мы создадим простую игру, в которой есть игровой персонаж и состояние этого персонажа может меняться в процессе игры

У игрового персонажа есть такие свойства:

name — имя
maxHealth — максимальный уровень здоровья. Это характеристика персонажа и в течении жизни не меняется
currentHealth — текущий уровень здоровья
baseAttackPower — номинальная сила атаки персонажа. В течении жизни персонажа не меняется, является базой для расчета текущей силы атаки
currentAttackPower — текущая сила атаки, может отличаться от номинальной в зависимости от состояния персонажа
Персонаж может находиться в различных состояниях, каждое из которых влияет на его поведение и характеристики. Всего у персонажа есть 4 различных состояния:

Normal — нормальное состояние. Дефолтное состояние персонажа

При входе в состояние отображается сообщение " enters normal state"
При выходе из состояния отображается сообщение " exits normal state"
Атака персонажа соответствует номинальной, здоровье не меняется
Poisoned — персонаж отравлен

При входе в состояние отображается сообщение " is poisoned"
При выходе из состояния отображается сообщение " is no longer poisoned"
Атака персонажа уменьшена вдвое, и персонаж получает 5 единиц урона при обновлении
Frozen — персонаж заморожен

При входе в состояние отображается сообщение " is frozen"
При выходе из состояния отображается сообщение " is no longer frozen"
Атака персонажа становится равной нулю
Berserk — персонаж в бешенстве

При входе в состояние отображается сообщение " goes berserk"
При выходе из состояния отображается сообщение " calms down"
Атака персонажа удваивается, но при атаке он сам получает урон в половину своей атаки
Интерфейсными методами персонажа являются:

attack()— Возвращает урон, который наносит персонаж своей атакой
takeDamage() — персонаж сам получает урон. Метод изменяет текущее количество здоровья персонажа
update() — обновляет персонажа, если есть какие-то эффекты, то они применяются в "тик" обновления
poison() — переводит персонажа в отравленное состояние
freeze() — переводит персонажа в замороженное состояние
goBerserk() — переводит персонажа в состояние бешенства
undoSpells() — отменяет заклинание и возвращает персонаж в нормальное состояние

В дополнение к этим методам создайте геттеры для получения значения свойств персонажа. При именовании геттеров придерживайтесь принятого нами соглашения

Реализуйте также кастомное текстовое представление персонажа. Как выглядит текстовое представление, смотрите в примерах работы ниже

src/main/java/io/hexlet/Character.java
Реализуйте интерфейсные методы и логику игрового персонажа

class Game {
    public static void main(String[] args) {
        var character = new Character("Hero", 100, 20);
        // => Hero enters normal state
        System.out.println(character); // => Hero (HP: 100/100, AP: 20, State: Normal)

        character.poison();
        // => Hero exits normal state
        // => Hero is poisoned
        character.update();
        System.out.println(character); // => Hero (HP: 95/100, AP: 10, State: Poisoned)

        character.freeze();
        // => Hero is no longer poisoned
        // => Hero is frozen
        character.attack(); // 0
        System.out.println(character); // => Hero (HP: 95/100, AP: 0, State: Frozen)

        character.goBerserk();
        // => Hero is no longer frozen
        // => Hero goes berserk
        character.attack(); // 40
        System.out.println(character); // => Hero (HP: 85/100, AP: 40, State: Berserk)

        character.undoSpells();
        // => Hero calms down
        // => enters normal state
        System.out.println(character); // => Hero (HP: 85/100, AP: 20, State: Normal)

        // Здоровье персонажа не может уходить в минус
        character.takeDamage(90); // IllegalStateException
    }
}
src/main/java/io/hexlet/states/NormalState.php, FrozenState.php, PoisonedState.php, BerserkState.php
Реализуйте логику состояний

Подсказки
Используйте паттерн "Состояние" для управления сложным поведением объекта
Обязательно изучите тесты, основной спецификацией задачи являются они
Не забудьте учесть инварианты. Здоровье персонажа не может стать равным нулю или уйти в минус